name:     "Release: Update Repositories"
run-name: "Release: Update Repositories [${{ github.ref_name }}]"

on:
  workflow_dispatch:

permissions:
  contents: write

defaults:
  run:
    shell: bash

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    env:
      VERSION_MAJOR: 8
    outputs:
      version-build: ${{ steps.parse-semver.outputs.version-build }}
      version-major: ${{ env.VERSION_MAJOR }}
      version-minor: ${{ steps.parse-semver.outputs.version-minor }}
      version-patch: ${{ steps.parse-semver.outputs.version-patch }}
      claw-url: ${{ steps.set-claw-url.outputs.claw-url }}

    steps:
    - name: Set CLAW URL
      id: set-claw-url
      run: echo "claw-url=https://packages.cloudfoundry.org" >> "${GITHUB_OUTPUT}"

    - name: Checkout cli
      uses: actions/checkout@v4

    - name: Parse semver
      id: parse-semver
      run: |
        git fetch --tags --quiet
        latest_tag="$(git tag | sort -V | grep v${VERSION_MAJOR} | tail -1)"
        echo "Latest tag is ${latest_tag}"
        
        version="${latest_tag#[vV]}"

        version_minor="${version#*.}"
        version_minor="${version_minor%.*}"

        echo "version-build=${version}"       >> "${GITHUB_OUTPUT}"
        echo "version-major=${version%%\.*}"  >> "${GITHUB_OUTPUT}"
        echo "version-minor=${version_minor}" >> "${GITHUB_OUTPUT}"
        echo "version-patch=${version##*.}"   >> "${GITHUB_OUTPUT}"

        echo "VERSION_BUILD=${version}"       >> "${GITHUB_ENV}"

    - name: Test if CLAW serve this version
      env:
        CLAW_URL: ${{ steps.set-claw-url.outputs.claw-url }}
      run: >
        set -vx

        curl --head "${CLAW_URL}/stable?release=linux64-binary&version=${VERSION_BUILD}&source=test" 2>&1 |
        grep --quiet --regexp 'HTTP.*302'

  update-deb:
    name: Update Debian Repository
    runs-on: ubuntu-20.04
    needs: setup
    env:
      CLAW_URL:              ${{ needs.setup.outputs.claw-url }}
      VERSION_BUILD:         ${{ needs.setup.outputs.version-build }}
      VERSION_MAJOR:         ${{ needs.setup.outputs.version-major }}
    steps:

    - name: Setup
      run: |
        echo "VERSION_BUILD: ${VERSION_BUILD}"

    - name: Checkout
      uses: actions/checkout@v4

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7
    - run: gem install deb-s3
    #RUN apt install -y ruby1.9.1 createrepo

    - name: Load GPG key
      env:
        SIGNING_KEY_GPG:            ${{ secrets.SIGNING_KEY_GPG }}
        SIGNING_KEY_GPG_PASSPHRASE: ${{ secrets.SIGNING_KEY_GPG_PASSPHRASE }}
      run: |
        echo -n "${SIGNING_KEY_GPG}" | base64 --decode | gpg --no-tty --batch --pinentry-mode loopback --import

    - name: View GPG keys
      run: gpg --list-keys

    - name: Configure GPG
      run: |
        echo "Configure GPG"

        # mkdir gpg-dir
        # export GNUPGHOME=${PWD}/gpg-dir
        # chmod 700 ${GNUPGHOME}
        # TODO: restore
        # trap "rm -rf ${GNUPGHOME}" 0

        cat >> ~/gpg.conf <<EOF
        personal-digest-preferences SHA256
        cert-digest-algo SHA256
        default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
        EOF

    - name: Download New Debian Packages From CLAW
      run: |
        mkdir installers
        curl -L "${CLAW_URL}/stable?release=debian32&version=${VERSION_BUILD}&source=github-rel" > installers/cf${VERSION_MAJOR}-cli-installer_${VERSION_BUILD}_i686.deb
        curl -L "${CLAW_URL}/stable?release=debian64&version=${VERSION_BUILD}&source=github-rel" > installers/cf${VERSION_MAJOR}-cli-installer_${VERSION_BUILD}_x86-64.deb
        curl -L "${CLAW_URL}/stable?release=debianarm64&version=${VERSION_BUILD}&source=github-rel" > installers/cf${VERSION_MAJOR}-cli-installer_${VERSION_BUILD}_arm64.deb

    - name: Update Debian Repository
      env:
        DEBIAN_FRONTEND:       noninteractive
        SIGNING_KEY_GPG_ID:    ${{ vars.SIGNING_KEY_GPG_ID }}
        AWS_ACCESS_KEY_ID:     ${{ vars.AWS_ACCESS_KEY_ID }}
        AWS_BUCKET_NAME:       cf-cli-debian-repo
        AWS_DEFAULT_REGION:    us-west-2
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_S3_ROLE_ARN:       ${{ vars.AWS_S3_ROLE_ARN }}
      run: |
        export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" $(aws sts assume-role --role-arn ${AWS_S3_ROLE_ARN} --role-session-name foobar --output text --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]"))
        # deb-s3 upload installers/*.deb \
        #   --preserve-versions \
        #   --bucket=${AWS_BUCKET_NAME} \
        #   --sign=${SIGNING_KEY_GPG_ID}

  # test-deb:
  #   name: Test Debian Repository
  #   strategy:
  #     matrix:
  #       os: [ubuntu-22.04, ubuntu-latest]
  #   runs-on: ${{ matrix.os }}
  #   needs:
  #   - setup
  #   - update-deb
  #   env:
  #     CLAW_URL:      ${{ needs.setup.outputs.claw-url }}
  #     VERSION_BUILD: ${{ needs.setup.outputs.version-build }}
  #     VERSION_MAJOR: ${{ needs.setup.outputs.version-major }}
  #   steps:
  #
  #   - name: Install CF CLI via apt
  #     run: |
  #       set -o pipefail -e
  #
  #       sudo apt update
  #       sudo apt install -y wget gnupg
  #
  #       wget -q -O - ${CLAW_URL}/debian/cli.cloudfoundry.org.key | sudo apt-key add -
  #       echo "deb ${CLAW_URL}/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
  #
  #       sudo apt update
  #       sudo apt install -y cf${VERSION_MAJOR}-cli
  #
  #       which cf
  #
  #       set -x
  #
  #       cf  -v
  #       cf${VERSION_MAJOR} -v
  #
  #       cf -v | grep "${VERSION_BUILD}"
  #
